import com.github.jk1.license.render.*

apply plugin: 'java'
apply from: "$rootDir/gradle/ext/coding-format.gradle"
apply plugin: 'com.github.jk1.dependency-license-report'

archivesBaseName = 'nodesource-addons'

buildscript {
    repositories {
        if (project.hasProperty('local')) mavenLocal()

        mavenCentral()

        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
        maven { url "http://nexus.qmino.com/content/repositories/miredot" }
        maven { url 'http://dl.bintray.com/content/abashev/vfs-s3'}
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.qmino:miredot-plugin:1.6.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
        classpath 'com.github.jk1:gradle-license-report:1.7'
    }

    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

allprojects {
    apply plugin: 'maven'

    group = 'org.ow2.proactive'
    version = nodesourceAddonsVersion


    rootProject.buildscript.repositories.each {
        repositories.add(it)
    }



    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }
}

ext.javaSubprojects = subprojects.findAll { new File(it.projectDir, "src").exists() }

configure(javaSubprojects) {
    apply plugin: 'java'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    sonarqube {
        properties {
            property "sonar.projectKey", "$project.group:nodesource-addons"
            property "sonar.projectName", "nodesource-addons"
            property "sonar.jdbc.driverClassName", "org.postgresql.Driver"
            property "sonar.language", "java"
            property "sonar.sources", "src/main"
            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
            property 'sonar.junit.reportsPath', "${buildDir}/test-results/test"
        }
    }


    jacoco {
        toolVersion = '0.8.2'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }



    dependencies {
        compile 'log4j:log4j:1.2.17'
        compile 'com.google.guava:guava:19.0'

        compile "org.ow2.proactive:rm-server:${rmVersion}"
        compile "org.objectweb.proactive:programming-core:${programmingVersion}"
        compile 'com.google.guava:guava:19.0'
        compile 'log4j:log4j:1.2.17'

        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
        testCompile 'org.mockito:mockito-core:1.10.19'
    }

    configurations {
        shadowJar

        runtime.extendsFrom = [compile]
        runtime.exclude module: 'rm-server'
        runtime.exclude module: 'programming-core'
        runtime.exclude module: 'guava'
        runtime.exclude module: 'log4j'

        testRuntime.extendsFrom = [testCompile]
    }


    jar {
        manifest {
            attributes("Implementation-Title": "ProActive",
                    "Implementation-Version": version,
                    "Specification-Version": version,
                    "Implementation-Vendor": "Activeeon - OASIS - INRIA Sophia Antipolis",
                    "Implementation-URL": "http://proactive.inria.fr"
            )
        }
    }
}
